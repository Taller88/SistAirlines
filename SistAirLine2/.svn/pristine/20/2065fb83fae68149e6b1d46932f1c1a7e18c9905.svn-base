package scheduleDTO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hr.cmn.ConnectionMaker;
import com.hr.cmn.DTO;
import com.hr.cmn.JDBCResClose;
import com.hr.cmn.WorkDiv;

public class ScheduleDAO extends WorkDiv {
	private ConnectionMaker connectionMaker;

	public ScheduleDAO() {
		connectionMaker = new ConnectionMaker();
	}

	@Override
	public DTO doSelectOne(DTO dto) {	
		ScheduleVO inVO = (ScheduleVO) dto;
	Connection connection = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	ScheduleVO outVO=null;
	StringBuilder sb = new StringBuilder(); // 검색 query

	// main query
	sb.append("SELECT                                                 ");
	sb.append("    sc_date,                                           ");
	sb.append("    sc_dtime,                                          ");
	sb.append("    sc_stime,                                          ");
	sb.append("    sc_dcity,                                          ");
	sb.append("    sc_acity,                                          ");
	sb.append("    sc_price,                                          ");
	sb.append("    sc_mileage,                                        ");
	sb.append("    sc_aname,                                          ");
	sb.append("    sc_capacity,                                       ");
	sb.append("    sc_unoccupied,                                     ");
	sb.append("    sc.sc_code sc_code,                                        ");
	sb.append("    sc_state                                           ");
	sb.append("FROM                                                   ");
	sb.append("    f_schedule sc                                      ");
	sb.append("WHERE sc.sc_code=(SELECT DISTINCT(se.sc_code)          ");
	sb.append("                FROM sc_seats se                       ");
	sb.append("                WHERE se.se_code=?)");


	try {
		// 1. connection
		connection = connectionMaker.getConnection();
		LOG.debug("1.connection=" + connection);

		// 2.query
		LOG.debug("2.Query=" + sb.toString());
		pstmt = connection.prepareStatement(sb.toString());

		// 3.param
		LOG.debug("3.param=\n" + inVO);

		pstmt.setString(1, inVO.getScCode());
	
		// 4.query수행
		rs = pstmt.executeQuery();
		while (rs.next()) {
			// Data 1건을 outVO담기.
			outVO = new ScheduleVO();

			outVO.setScDate(rs.getString("sc_date"));
			outVO.setScDtime(rs.getString("sc_dtime"));
			outVO.setScStime(rs.getString("sc_stime"));
			outVO.setScDcity(rs.getString("sc_dcity"));
			outVO.setScAcity(rs.getString("sc_acity"));
			outVO.setScPrice(rs.getString("sc_price"));
			outVO.setScMileage(rs.getInt("sc_mileage"));
			outVO.setScAname(rs.getString("sc_aname"));
			outVO.setScCapacity(rs.getString("sc_capacity"));
			outVO.setScUnoccupied(rs.getString("sc_unoccupied"));
			outVO.setScCode(rs.getString("sc_code"));
			outVO.setScstate(rs.getInt("sc_state")); 
			
			
		}
		

	} catch (Exception e) {
		LOG.debug("===================");
		LOG.debug("=SQLException=" + e.getMessage());
		LOG.debug("===================");
		e.printStackTrace();
	} finally {
		JDBCResClose.close(rs);
		JDBCResClose.close(pstmt);
		JDBCResClose.close(connection);
	}
	return outVO;
	}

	@Override
	public int doUpdate(DTO dto) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int doDelete(DTO dto) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int doInsert(DTO dto) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<ScheduleVO> doRetrive(DTO dto) {
		ScheduleVO inVO = (ScheduleVO) dto;
		List<ScheduleVO> outList = new ArrayList<ScheduleVO>();

		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		StringBuilder sb = new StringBuilder(); // 검색 query

		// main query
		sb.append("SELECT SC_DATE,											\n");
		sb.append("		SC_DTIME,											\n");
		sb.append("		SC_DCITY,  											\n");
		sb.append("		SC_ACITY,  											\n");
		sb.append("		TO_CHAR(SC_PRICE,'999,999') \"PRICE\",				\n");
		sb.append("		SC_MILEAGE,											\n");
		sb.append("		SC_CODE 											\n");
		sb.append("FROM F_SCHEDULE      									\n");
		sb.append("WHERE TO_CHAR(SC_DATE,'YYYYMMDD') = ?					\n");
		sb.append("AND SC_DCITY = (SELECT C_ENG FROM CITY WHERE C_KOR = ? ) \n");
		sb.append("AND SC_ACITY = (SELECT C_ENG FROM CITY WHERE C_KOR = ? )	\n");

		try {
			// 1. connection
			connection = connectionMaker.getConnection();
			LOG.debug("1.connection=" + connection);

			// 2.query
			LOG.debug("2.Query=" + sb.toString());
			pstmt = connection.prepareStatement(sb.toString());

			// 3.param
			LOG.debug("3.param=\n" + inVO);

			pstmt.setString(1, inVO.getScDate());
			pstmt.setString(2, inVO.getScDcity());
			pstmt.setString(3, inVO.getScAcity());

			// 4.query수행
			rs = pstmt.executeQuery();
			while (rs.next()) {
				// Data 1건을 outVO담기.
				ScheduleVO outVO = new ScheduleVO();

				outVO.setScDate(rs.getString("SC_DATE"));
				outVO.setScDtime(rs.getString("SC_DTIME"));
				outVO.setScDcity(rs.getString("SC_DCITY"));
				outVO.setScAcity(rs.getString("SC_ACITY"));
				outVO.setScPrice(rs.getString("PRICE"));
				outVO.setScMileage(rs.getInt("SC_MILEAGE"));
				outVO.setScCode(rs.getString("SC_CODE"));
				
				outList.add(outVO);
			}
			LOG.debug("4 return :" + outList);

		} catch (Exception e) {
			LOG.debug("===================");
			LOG.debug("=SQLException=" + e.getMessage());
			LOG.debug("===================");
			e.printStackTrace();
		} finally {
			JDBCResClose.close(rs);
			JDBCResClose.close(pstmt);
			JDBCResClose.close(connection);
		}
		return outList;
	}
	
	public List<ScheduleVO> adminRetrive(DTO dto) {
		ScheduleVO inVO = (ScheduleVO) dto;
		List<ScheduleVO> outList = new ArrayList<ScheduleVO>();

		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		StringBuilder sbWhere = new StringBuilder();
		StringBuilder sb = new StringBuilder(); // 검색 query
		
//		if(null != inVO.getSearchDiv()) {
//			if("10".equals(inVO.getSearchDiv())) {
//				sbWhere.append("WHERE t1.sc_dcity like ?||'%' \n");		
//				sbWhere.append("AND t1.SC_DATE like ?||'%' \n");		
//			}


		// main query
		sb.append("SELECT SC_DATE,											        \n");
		sb.append("		SC_DTIME,										            \n");
		sb.append("		SC_DCITY,  										            \n");
		sb.append("		SC_ACITY,  										            \n");
		sb.append("		TO_CHAR(SC_PRICE,'999,999') \"PRICE\",			            \n");
		sb.append("		SC_MILEAGE,										            \n");
		sb.append("		SC_CODE 										            \n");
		sb.append("FROM F_SCHEDULE      									        \n");
		sb.append("WHERE (TO_CHAR(SC_DATE,'YYYYMMDD') = ?							\n");
		sb.append("AND SC_DCITY = (SELECT C_ENG FROM CITY WHERE C_KOR = ? )) 		\n");
		sb.append("OR (TO_CHAR(SC_DATE,'YYYYMMDD') = ?                   			\n");
		sb.append("AND SC_ACITY = (SELECT C_ENG FROM CITY WHERE C_KOR = ? ))		\n"); 
		try {
			// 1. connection
			connection = connectionMaker.getConnection();
			LOG.debug("1.connection!=" + connection);

			// 2.query
			LOG.debug("2.Query=" + sb.toString());
			pstmt = connection.prepareStatement(sb.toString());

			// 3.param
			LOG.debug("3.param=\n" + inVO);

			pstmt.setString(1, inVO.getScDate());
			pstmt.setString(2, inVO.getScDcity());
			pstmt.setString(3, inVO.getScDate());
			pstmt.setString(4, inVO.getScDcity());


			// 4.query수행
			rs = pstmt.executeQuery();
			while (rs.next()) {
				// Data 1건을 outVO담기.
				ScheduleVO outVO = new ScheduleVO();

				outVO.setScDate(rs.getString("SC_DATE"));
				outVO.setScDtime(rs.getString("SC_DTIME"));
				outVO.setScDcity(rs.getString("SC_DCITY"));
				outVO.setScAcity(rs.getString("SC_ACITY"));
				outVO.setScPrice(rs.getString("PRICE"));
				outVO.setScMileage(rs.getInt("SC_MILEAGE"));
				outVO.setScCode(rs.getString("SC_CODE"));
				
				outList.add(outVO);
			}
			LOG.debug("4 return :" + outList);

		} catch (Exception e) {
			LOG.debug("===================");
			LOG.debug("=SQLException=" + e.getMessage());
			LOG.debug("===================");
			e.printStackTrace();
		} finally {
			JDBCResClose.close(rs);
			JDBCResClose.close(pstmt);
			JDBCResClose.close(connection);
		}
		return outList;
	}
	
	
	

	   public List<ScheduleDTO> doRetrive1(DTO dto) {
	      Connection conn=null;
	      PreparedStatement ppst=null;
	      ResultSet rs=null;
	      List<ScheduleDTO> list = new ArrayList<ScheduleDTO>();
	      ScheduleDTO inVO=(ScheduleDTO)dto;
	      LOG.debug("inVO:"+inVO);
	      
	      StringBuilder sb=new StringBuilder();
	      try {
	         conn=this.connectionMaker.getConnection();
	         
	         sb.append("SELECT            ");
	         sb.append("TO_CHAR(sc_date,'YYYYMMDD') sc_date,");
	         sb.append("    sc_dtime,        ");
	         sb.append("    sc_stime,        ");
	         sb.append("    sc_dcity,        ");
	         sb.append("    sc_acity,        ");
	         sb.append("TO_CHAR(sc_price,'999,999') sc_price, ");
	         sb.append("    sc_mileage,      ");
	         sb.append("    sc_aname,        ");
	         sb.append("    sc_capacity,     ");
	         sb.append("    sc_unoccupied,   ");
	         sb.append("    sc_code          ");
	         sb.append("FROM                 ");
	         sb.append("    f_schedule       ");
	         sb.append("WHERE TO_CHAR(sc_date,'YYYYMMDD')=?");
	         sb.append("   AND sc_dcity=(SELECT C_ENG FROM CITY WHERE C_KOR = ? )      ");
	         sb.append("   AND sc_acity=(SELECT C_ENG FROM CITY WHERE C_KOR = ? )      ");
	         sb.append("   ORDER BY sc_dtime      ");
	         
	         
	         ppst=conn.prepareStatement(sb.toString());
	         
	         ppst.setString(1, inVO.getScDate());
	         ppst.setString(2, inVO.getScDcity());
	         ppst.setString(3, inVO.getScAcity());
	         
	         rs=ppst.executeQuery();
	         
	         if(rs.next()) {
	            do {
	            ScheduleDTO outVO=new ScheduleDTO();
	            
	            outVO.setScDate(rs.getString("sc_date"));      
	            outVO.setScDtime(rs.getString("sc_dtime"));    
	            outVO.setScStime(rs.getString("sc_stime"));     
	            outVO.setScDcity(rs.getString("sc_dcity"));     
	            outVO.setScAcity(rs.getString("sc_acity"));     
	            outVO.setScPrice(rs.getString("sc_price"));     
	            outVO.setScMileage(rs.getString("sc_mileage"));   
	            outVO.setScAname(rs.getString("sc_aname"));     
	            outVO.setScCapacity(rs.getString("sc_capacity"));
	            LOG.debug("sc_capacity: "+rs.getString("sc_capacity"));
	            outVO.setScUnoccupied(rs.getString("sc_unoccupied"));
	            LOG.debug("sc_unoccupied: "+rs.getString("sc_unoccupied"));
	            outVO.setScCode(rs.getString("sc_code"));       
	            LOG.debug("outVO:"+outVO);
	            list.add(outVO);
	            }while(rs.next());
	         }
	      }catch(SQLException e){

	         e.printStackTrace();
	      }finally {
	         try {
	            if(rs != null) rs.close();
	            if(ppst != null) ppst.close();
	            if(conn != null) conn.close();
	         } catch (SQLException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	         }
	      }//finally
	      
	      
	      return list;
	   }
	   
	
	
	
	public int doUpdateSeat(DTO dto) {
	      int flag=0;
	      ScheduleDTO inVO=(ScheduleDTO)dto;
	      LOG.debug("OccupiedVO: "+inVO);
	      
	      StringBuilder sb=new StringBuilder();
	      Connection conn=null;
	      PreparedStatement ppst=null;
	      try {
	         conn=connectionMaker.getConnection();
	         sb.append("UPDATE f_schedule               ");
	         sb.append("SET                                  ");
	         sb.append("    sc_unoccupied =sc_unoccupied-1   ");
	         sb.append("WHERE                                ");
	         sb.append("    sc_code = ?                     ");
	         
	         ppst=conn.prepareStatement(sb.toString());
	         ppst.setString(1, inVO.getScCode());
	         
	         flag=ppst.executeUpdate();
	         
	      }catch(SQLException e) {
	         LOG.debug("=========================");
	         LOG.debug("SQLException: "+e.getMessage());
	         LOG.debug("=========================");
	      }finally {
	         try {
	            if(ppst != null) ppst.close();
	            if(conn != null) conn.close();
	         } catch (SQLException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	         }
	      }//finally
	      
	      return flag;
	   }

}
