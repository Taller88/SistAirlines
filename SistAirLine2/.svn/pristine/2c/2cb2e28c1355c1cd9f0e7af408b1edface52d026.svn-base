/**
 * 
 */
package Reservation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.hr.cmn.ConnectionMaker;
import com.hr.cmn.JDBCResClose;



/**
 * @author sist
 *
 */
public class ReservationDao {
	private final Logger LOG = Logger.getLogger(ReservationDao.class);
	private ConnectionMaker connectionMaker;

	public ReservationDao() {
		connectionMaker = new ConnectionMaker();
	}

	public DTO doSelectOne(DTO dto) {
		ReservationVO inVO = (ReservationVO) dto;
		ReservationVO outVO = null;
		LOG.debug("inVO: "+inVO);
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			
			connection=connectionMaker.getConnection();
			LOG.debug("1. connection:" + connection);

		
			StringBuilder sb = new StringBuilder();
			
			sb.append("SELECT              \n");
			sb.append("    RES_NUM,        \n");
			sb.append("    RES_PASSPORT,   \n");
			sb.append("    RES_ENAME,      \n");
			sb.append("    RES_BIR,        \n");
			sb.append("    RES_PHONE,      \n");
			sb.append("    RES_EMAIL,      \n");
			sb.append("    RES_WAY,        \n");
			sb.append("    RES_PTYPE,      \n");
			sb.append("    RES_GENDER,     \n");
			sb.append("    RES_STATE       \n");
			sb.append("    RES_State       \n");
			sb.append("    RES_Pay 	       \n");
			sb.append("    RES_Mileage     \n");
			sb.append("    RES_SCODE       \n");
			sb.append("    U_NUM           \n");
			sb.append("FROM RESERVATION    \n");
			sb.append("WHERE RES_NUM = ?   \n");
			sb.append("AND RES_PASSPORT = ?\n");
					
			pstmt = connection.prepareStatement(sb.toString());
			LOG.debug("2. PreparedStatement:" + pstmt);
			LOG.debug("2.1. sql:\n" + sb.toString());

			
			LOG.debug("3. Param:" + inVO);
			pstmt.setString(1, inVO.getResNum());
			pstmt.setString(2, inVO.getResPassport());

			
			rs = pstmt.executeQuery();
			if (rs.next()) {
				
				outVO = new ReservationVO();

				outVO.setResNum(rs.getString("RES_NUM"));
				outVO.setResPassport(rs.getString("RES_PASSPORT"));				
				outVO.setResEname(rs.getString("RES_ENAME"));
				outVO.setResBir(rs.getString("RES_BIR"));
				outVO.setResphone(rs.getString("RES_PHONE"));
				outVO.setResEmail(rs.getString("RES_EMAIL"));
				outVO.setResWay(rs.getInt("RES_WAY"));
				outVO.setResPtype(rs.getInt("RES_PTYPE"));
				outVO.setResGender(rs.getInt("RES_GENDER"));
				outVO.setResState(rs.getInt("RES_STATE"));
				outVO.setResPay(rs.getInt("RES_PAY"));
				outVO.setResMileage(rs.getInt("RES_MILEAGE"));
				outVO.setResScode(rs.getString("RES_STATE"));	
				outVO.setuNum(rs.getString("U_NUM"));
				LOG.debug("4. return :" + outVO);
			}

		} catch (SQLException e) {
			LOG.debug("===================");
			LOG.debug("=  SQL Exception  =" + e.getMessage());
			LOG.debug("===================");
			e.printStackTrace();
		} finally {
			JDBCResClose.close(rs);
			JDBCResClose.close(pstmt);
			JDBCResClose.close(connection);
		}

		return outVO;

	}

	public int doUpdate(DTO dto) {
		int flag = 0;
		ReservationVO inVO = (ReservationVO) dto;

		Connection connection = null;// DB Connection
		PreparedStatement pstmt = null;// VS Statement

		try {
			// 1.Connection �깮�꽦
			connection = connectionMaker.getConnection();
			connection.setAutoCommit(false);// transaction 媛쒕컻�옄媛� 愿�由�

			LOG.debug("1. Connection: " + connection);
			// 2.PreparedStatement
			// 2.1 SQL
			StringBuilder sb = new StringBuilder();

			sb.append("UPDATE reservation  \n");
			sb.append("SET RES_ENAME = ?,  \n");
			sb.append("    RES_KNAME = ?,  \n");
			sb.append("	RES_PTYPE = ?,     \n");
			sb.append("	RES_WAY = ?,       \n");
			sb.append("	RES_PHONE = ?,     \n");
			sb.append("	RES_EMAIL = ?,     \n");
			sb.append("	RES_STATE = ?      \n");
			sb.append("WHERE RES_NUM = ?   \n");
			sb.append("AND  RES_PASSPORT =?\n");
			// ------------------荑쇰━------------------------

			pstmt = connection.prepareStatement(sb.toString());
			LOG.debug("2. PreparedStatement: " + pstmt);
			LOG.debug("2.1. query:\n" + sb.toString());
			// 3.param
			LOG.debug("3. param: " + inVO);
			// 3.1 param binding
//			pstmt.setString(1, inVO.getRESENAME());
//			pstmt.setString(2, inVO.getRESKNAME());
//			pstmt.setInt(3, inVO.getRESPTYPE());
//			pstmt.setInt(4, inVO.getRESWAY());
//			pstmt.setString(5, inVO.getRESPHONE());
//			pstmt.setString(6, inVO.getRESEMAIL());
//			pstmt.setString(7, inVO.getRESSTATE());
//			pstmt.setString(8, inVO.getRESNUM());
//			pstmt.setString(9, inVO.getRESPASSPORT());

			flag = pstmt.executeUpdate();
			connection.commit();
			LOG.debug("4. flag: " + flag);
		} catch (SQLException e) {
			LOG.debug("===========================");
			LOG.debug("=SQLException=" + e.getMessage());
			LOG.debug("===========================");
			e.printStackTrace();

			// Rollback
			JDBCResClose.rollBack(connection);

		} finally { 
			
			JDBCResClose.close(pstmt);// prepareStatement
			JDBCResClose.close(connection);// connection
		}
		return flag;
	}

	
	public int doDelete(DTO dto) {
		int flag = 0;

		Connection connection = connectionMaker.getConnection();
		PreparedStatement pstmt = null;
		ReservationVO inVO = (ReservationVO) dto;

	
		StringBuilder sb = new StringBuilder();
		sb.append(" DELETE from reservation \n");
		sb.append(" WHERE RES_NUM = ?    \n");

		try {

			LOG.debug("2.sql=\n" + sb.toString());
			LOG.debug("2.1 param=\n" + inVO);
			pstmt = connection.prepareStatement(sb.toString());
			LOG.debug("3.pstmt=" + pstmt);
		
			pstmt.setString(1, inVO.getResNum());

			
			flag = pstmt.executeUpdate();
			LOG.debug("4.flag=" + flag);

		} catch (SQLException e) {
			LOG.debug("===================");
			LOG.debug("SQLException=" + e.getMessage());
			LOG.debug("===================");
			e.printStackTrace();
			
		} finally {
			
			JDBCResClose.close(pstmt);// prepareStatement
			JDBCResClose.close(connection);// connection
		}
		return flag;
	}

	public int doInsert(DTO dto) {
		int flag = 0;

		Connection connection = connectionMaker.getConnection();
		PreparedStatement pstmt = null;
		ReservationVO inVO = (ReservationVO) dto;

		try {

			// 3. query�닔�뻾�쓣 �쐞�븳 PreparedStatement
			StringBuilder sb = new StringBuilder();

			// ----------------Query---------------------

			sb.append("    INSERT INTO Reservation (                                                              \n");
			sb.append("    res_num,  		 										                              \n");
			sb.append("    res_passport,              															  \n");
			sb.append("    res_ename,          					                                                  \n");
			sb.append("    res_bir,              					                                              \n");
			sb.append("    res_phone,                                                                             \n");
			sb.append("    res_email,                                                                             \n");
			sb.append("    res_way,                                                                               \n");
			sb.append("    res_ptype,                                                                             \n");
			sb.append("    res_gender,                                                                            \n");
			sb.append("    res_state,                                                                             \n");
			sb.append("    res_pay,                                                                               \n");
			sb.append("    res_mileage,                                                                           \n");
			sb.append("    res_scode                 )                                                            \n");
			sb.append("     VALUES(TO_CHAR(sysdate,'YYYYMMDD')||LPAD(TO_CHAR(resno_seq.NEXTVAL),7,'0000000'),    \n");
			sb.append(" 			    ?,                 			                                              \n");
			sb.append(" 				?,                 			                                              \n");
			sb.append(" 				?,                			                                              \n");
			sb.append(" 				?,             		    	                                              \n");
			sb.append(" 				?,                			                                              \n");
			sb.append(" 				?, 			    		                                                  \n");
			sb.append(" 				?,				   		                                                  \n");
			sb.append(" 				?,	               		  	                                              \n");
			sb.append(" 				0,	               		  	                                              \n");
			sb.append(" 				?,	               		  	                                              \n");
			sb.append(" 				?,	               		  	                                              \n");
			sb.append(" 				?	               		  	                                              \n");
			sb.append(" )                      		 	                                                          \n");

			LOG.debug("2.sql=\n" + sb.toString());
			LOG.debug("2.1 param=\n" + inVO);
			pstmt = connection.prepareStatement(sb.toString());
			LOG.debug("3.pstmt=" + pstmt);

			// -----------------Bind설정-----------------
			pstmt.setString(1, inVO.getResPassport());
			pstmt.setString(2, inVO.getResEname());
		    pstmt.setString(3, inVO.getResBir());
		    pstmt.setString(4, inVO.getResphone());
		    pstmt.setString(5, inVO.getResEmail());
		    pstmt.setInt   (6, inVO.getResWay());
		    pstmt.setInt   (7, inVO.getResPtype());		
		    pstmt.setInt   (8, inVO.getResGender());		
		    pstmt.setInt   (9,inVO.getResPay());
		    pstmt.setInt   (10,inVO.getResMileage());		
		    pstmt.setString(11,inVO.getResScode());
		
		    		
			flag = pstmt.executeUpdate();
			LOG.debug("4.flag=" + flag);

		} catch (SQLException e) {
			LOG.debug("===================");
			LOG.debug("SQLException=" + e.getMessage());
			LOG.debug("===================");
			e.printStackTrace();
		
			
		} finally {
		
			JDBCResClose.close(pstmt);// prepareStatement
			JDBCResClose.close(connection);// connection
		}
		return flag;

	}
	
	public List<?> doRetrieve(DTO dto) {
		SearchVO inVO = (SearchVO) dto;
		List<ReservationVO> outList = new ArrayList<ReservationVO>();
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet  rs = null;
		
		StringBuilder sbWhere = new StringBuilder();//寃��깋議곌굔
		StringBuilder sb = new StringBuilder();//寃��깋query
		
		
		if(null != inVO.getSearchDiv()) {
			if("10".equals(inVO.getSearchDiv())) {//�깮�뀈�썡�씪
				sbWhere.append("WHERE t1.RES_NUM like ?||'%' \n");		
			}else if("20".equals(inVO.getSearchDiv())) {//�씠由�
				sbWhere.append("WHERE t1.RES_PASSPORT like ?||'%' \n");
			}else if("30".equals(inVO.getSearchDiv())) {//�쉶�썝ID
				sbWhere.append("WHERE t1.RES_PHONE like ?||'%' \n");
		    }else if("40".equals(inVO.getSearchDiv())) {//�빖�뱶�룿
				sbWhere.append("WHERE t1.RES_EMAIL like ?||'%' \n");
		    }
		}
		//荑쇰━荑쇰━---------------------------------------------------------------------
		sb.append("SELECT *                                                     \n");
		sb.append("FROM(                                                        \n");
		sb.append("    SELECT B.RES_NUM                                         \n");
		sb.append("          ,B.RES_PASSPORT                                    \n");
		sb.append("          ,b.RES_PHONE                                       \n");
		sb.append("          ,b.RES_EMAIL                                       \n");
		sb.append("    FROM (                                                   \n");
		sb.append("        SELECT ROWNUM as rnum,A.*                            \n");
		sb.append("        FROM(                                                \n");
		sb.append("            SELECT t1.*                                      \n");
		sb.append("            FROM RESERVATION t1                              \n");
	
		//--------------------------------------------------------------------------
		if(null != inVO.getSearchDiv() ) {
			if(null != inVO.getSearchWord() ) {
				sb.append(sbWhere.toString());
			}
		}
		//--------------------------------------------------------------------------
		sb.append("            ORDER BY t1.RES_NUM DESC                         \n");
		sb.append("        )A                                                   \n");
		sb.append("        WHERE rownum <=(?*(?-1)+?)						    \n");
		sb.append("    )B                                                       \n");
		sb.append("    WHERE rnum >=(?*(?-1)+1) )              					\n");
		sb.append("CROSS JOIN                                                   \n");
		sb.append("(                                                            \n");
		sb.append("    SELECT COUNT(*) TOTAL                                    \n");
		sb.append("    FROM RESERVATION t1                                      \n");
		sb.append("    --寃��깋議곌굔                                     									\n");
		//--------------------------------------------------------------------------
		if(null != inVO.getSearchDiv() ) {
			if(null != inVO.getSearchWord() ) {
				sb.append(sbWhere.toString());
			}
		}
		//--------------------------------------------------------------------------
		sb.append(")                                                            \n");
		//荑쇰━荑쇰━---------------------------------------------------------------------
		try {
			//1.connection
			connection = this.connectionMaker.getConnection();
			LOG.debug("1. connection="+connection);
			
			//2.pstmt
			//2.1.
			LOG.debug("2. qurey=\n"+sb.toString());
			pstmt = connection.prepareStatement(sb.toString());
			LOG.debug("2.1. pstmt="+pstmt);
			LOG.debug("3. param="+inVO);
		
			//寃��깋�뼱 �엳�뒗 寃쎌슦
			if(null != inVO.getSearchDiv() && null != inVO.getSearchWord() ) {
				//寃��깋�뼱
				//&PAGE_SIZE*(&PAGE_NUM-1)+&PAGE_SIZE
				//&PAGE_SIZE*(&PAGE_NUM-1)+1
				
				//1.寃��깋�뼱
				//2.PAGE_SIZE
				//3.PAGE_NUM
				//4.PAGE_SIZE
				//5.PAGE_SIZE
				//6.PAGE_NUM
				//7.寃��깋�뼱
				pstmt.setString(1, inVO.getSearchWord());
				pstmt.setInt(2, inVO.getPageSize());
				pstmt.setInt(3, inVO.getPageNum());
				pstmt.setInt(4, inVO.getPageSize());
				pstmt.setInt(5, inVO.getPageSize());
				pstmt.setInt(6, inVO.getPageNum());
				pstmt.setString(7, inVO.getSearchWord());
			
		
			}else {
				//1.PAGE_SIZE
				//2.PAGE_NUM
				//3.PAGE_SIZE
				//4.PAGE_SIZE
				//5.PAGE_NUM
				
				pstmt.setInt(1, inVO.getPageSize());
				pstmt.setInt(2, inVO.getPageNum());
				pstmt.setInt(3, inVO.getPageSize());
				pstmt.setInt(4, inVO.getPageSize());
				pstmt.setInt(5, inVO.getPageNum());
				
			}
		
			//4.query�닔�뻾
			rs = pstmt.executeQuery();
			while(rs.next()) {
				   //Data 1嫄댁쓣 outVO�떞湲�.
				ReservationVO outVO = new ReservationVO();
				  
				   
//				   outVO.setRESNUM(rs.getString("RES_NUM"));
//				   outVO.setRESPASSPORT(rs.getString("RES_PASSPORT"));
//				   outVO.setRESPHONE(rs.getString("RES_PHONE"));
//				   outVO.setRESEMAIL(rs.getString("RES_EMAIL"));
				  
				   
				   outVO.setTotal(rs.getInt("total"));
				   outList.add(outVO);
				   
			   }//while
			   LOG.debug("4. return :"+outList);
			
			
			
		} catch(SQLException e){
			LOG.debug("=================");
			LOG.debug("=SQLException="+e.getMessage());
			LOG.debug("=================");
			e.printStackTrace();
		}finally {
			JDBCResClose.close(rs);
			JDBCResClose.close(pstmt);
			JDBCResClose.close(connection);
			
		}
		
		
		return outList;
	}
		
	
}