package Reservation;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.google.gson.Gson;
import com.hr.cmn.ContHandler;
import com.hr.cmn.MessageVO;
import com.hr.cmn.SearchVO;
import com.hr.cmn.StringUtil;

import User.UserVO;
import member.MemberService;
import member.MemberVO;
import scheduleDTO.ScheduleDAO;
import scheduleDTO.ScheduleService;
import scheduleDTO.ScheduleVO;



@WebServlet(description = "결제페이지", urlPatterns = { "/reservationtest/reservationtest.do" })
public class ReservationCont extends HttpServlet implements ContHandler{
   private static final long serialVersionUID = 1L;
   /** resService 객체 */  
   private  ReservationService resService; 
   /** userService 객체 */
   private MemberService memberService;
   private ScheduleService scheduleService;
   
   
   /**
     * @see HttpServlet#HttpServlet()
     */
    public ReservationCont() {
       super();
       resService= new ReservationService();
        //cdService = new CodeService(); 
    }    
    
   /**
    * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
    */
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      
      LOG.debug("doGet------");
      serviceHandler(request,response);
   }

   /**
    * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
    */
   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      LOG.debug("1.doPost------");
      serviceHandler(request,response);
   }

   @Override
   public void serviceHandler(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
      //1. work_div: 작업구분
      //2. request Encoding: utf-8
      //3. 기능별 분해
      //   거래분기:
      //   do_update : 수정
      //   do_delete : 삭제
      //   do_insert : 등록 
      //   do_retrieve : 목록조회
      //   do_selectOne : 단건조회
      
      
      req.setCharacterEncoding("utf-8");//resquest의 인코딩: utf-8
      String workDiv = StringUtil.nvl(req.getParameter("work_div"));//null -> ""
      LOG.debug("2.========================");
      LOG.debug("2.=workDiv="+workDiv);
      LOG.debug("2.========================");
      switch(workDiv) {//거래분기
      	  case "do_changeReservation"://수정
	          this.doChangeReservation(req, res);
	          break;
	         
      	  case "do_update"://수정
             this.doUpdate(req, res);
             break;
          case "do_delete"://삭제
             this.doDel(req, res);
             break;
          case"do_selectOne"://단건조회,단건조회 화면으로 이동
             this.doSelectOne(req, res);
             break;
          case "move_to_save"://등록화면으로 이동 
             doMoveToSave(req, res);
             break;
         case "do_insert"://단건 등록             
            this.doInsert(req,res);
            break;
         case "do_retrieve"://목록조회
             this.doRetrieve(req, res);
             break;
         case "do_member_retrieve"://목록조회
             this.doMemberRetrieve(req, res);
             break;
         case "do_Res_Retrieve"://목록조회
             this.doResRetrieve(req, res);
             break;
          default:
            LOG.debug("========================");
            LOG.debug("=작업구분을 확인하세요.workDiv="+workDiv);
            LOG.debug("========================");
            break;
      }
   
   }

   public void doChangeReservation(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
	      LOG.debug("3.========================");
	      LOG.debug("3.=       doUpdate       =");
	      LOG.debug("3.========================");
	      
	      ReservationVO inVO = new ReservationVO();//param
	      //1.param read
	      //2.param BoardVO
	      //3.service 메소드 호출
	      
	      String resNum = StringUtil.nvl(req.getParameter("resNum"),"");
	      //작성자,수정자
	      String resPassport= StringUtil.nvl(req.getParameter("resPassport"),"");
	      //내용
	      String resState = StringUtil.nvl(req.getParameter("resState"),"");
	      int state=Integer.parseInt(resState);
	      
	      inVO.setResNum(resNum);
	      inVO.setResPassport(resPassport);
	      inVO.setResState(state);
	      
	      int flag = this.resService.doChangeState(inVO);
	      LOG.debug("3.========================");
	      LOG.debug("3.=         flag         ="+flag);
	      LOG.debug("3.========================");
	      
	      //응답처리 
	      res.setContentType("text/html;charset = utf-8 ");
	      PrintWriter out = res.getWriter();

	      String msg = "";
		  Gson  gson = new Gson(); 
		  if(1==flag && state==1) {
			  msg = "예약 상태를 '취소'상태로 변경하였습니다";
		  }else if(1==flag && state==2) {
			  msg = "예약 상태를 '예약대기'상태로 변경하였습니다";
		  }else {
			  msg = "예약 상태가 변경되지 않았습니다.";
		  }
		  
		  String gsonStr =  gson.toJson(new MessageVO(String.valueOf(flag), msg));
		  LOG.debug("====================");
		  LOG.debug("=gsonStr="+gsonStr);
		  LOG.debug("====================");
		  out.println(gsonStr);

	      
	   }

   
   @Override
   public void doUpdate(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
      LOG.debug("3.========================");
      LOG.debug("3.=       doUpdate       =");
      LOG.debug("3.========================");
      
      ReservationVO inVO = new ReservationVO();//param
      //1.param read
      //2.param BoardVO
      //3.service 메소드 호출
      
      //SEQ
      String seq = StringUtil.nvl(req.getParameter("seq"),"0");
      //제목
      String title = StringUtil.nvl(req.getParameter("title"),"");
      //작성자,수정자
      String regId = StringUtil.nvl(req.getParameter("reg_id"),"");
      //내용
      String contents = StringUtil.nvl(req.getParameter("contents"),"");
      

      
      int flag = this.resService.doUpdate(inVO);
      LOG.debug("3.========================");
      LOG.debug("3.=         flag         ="+flag);
      LOG.debug("3.========================");
      
      //응답처리 
      res.setContentType("text/html;charset = utf-8 ");
      PrintWriter out = res.getWriter();


      
   }

   @Override
   public void doInsert(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
         LOG.debug("3.========================");
         LOG.debug("3.=       doInsert       =");
         LOG.debug("3.========================");
         
         //resVO inVO = new resVO();//param
         ReservationVO inVO   = new ReservationVO();
            
         List<ReservationVO> inresVO = new ArrayList<ReservationVO>();
         
         String uNum  = StringUtil.nvl(req.getParameter("uNum"), "0") ;
         String adult = StringUtil.nvl(req.getParameter("adult"), "0") ;
         String child = StringUtil.nvl(req.getParameter("child"), "0") ;
         String todd  = StringUtil.nvl(req.getParameter("todd"), "0") ;
         
         int adultCnt=Integer.parseInt(adult);
         int childCnt=Integer.parseInt(child);
         int toddCnt=Integer.parseInt(todd);
         
         String ResNum = resService.doSelectResNo();
         
         /** 회원 및 비회원 */
             
            String[] gender = req.getParameterValues("gender");   
            String[] ename = req.getParameterValues("ename");
            String[] scode = req.getParameterValues("scode");
            String[] passport = req.getParameterValues("passport");      
            String[] Year = req.getParameterValues("year"); 
            String[] Month = req.getParameterValues("month"); 
            String[] Day = req.getParameterValues("day");
            String[] phone = req.getParameterValues("phone"); 
            String[] email = req.getParameterValues("email");
            
             LOG.debug( "gender: "+gender[0]);
             LOG.debug( "ename: "+ename[0]);
             LOG.debug( "scode: "+scode[0]);
             LOG.debug( "passport: "+passport[0]);
             LOG.debug( "Year: "+Year[0]);
             LOG.debug( "Month: "+Month[0]);
             LOG.debug( "Day: "+Day[0]);
             LOG.debug( "phone: "+phone[0]);
             LOG.debug( "email: "+email[0]);
             
             if(uNum != "0") {
                   inVO.setResNum(ResNum);
                    inVO.setResEname(ename[0]);
                 inVO.setResPassport(passport[0] );
                 inVO.setResBir(Year[0]+Month[0]+Day[0]);
                 inVO.setResphone(phone[0]);
                 inVO.setResEmail(email[0]);
                 inVO.setResWay(0);
                 inVO.setResPtype(0);
                 inVO.setResGender(Integer.parseInt(gender[0]));
                 inVO.setResState(0);
                 inVO.setResPay(0);
                 inVO.setResMileage(0);
                 inVO.setResScode(scode[0]);
            }else {
                   inVO.setResNum(ResNum);
                  inVO.setResEname(ename[0]);
                 inVO.setResPassport(passport[0] );
                 inVO.setResBir(Year[0]+Month[0]+Day[0]);
                 inVO.setResphone(phone[0]);
                 inVO.setResEmail(email[0]);
                 inVO.setResWay(0);
                 inVO.setResPtype(0);
                 inVO.setResGender(Integer.parseInt(gender[0]));
                 inVO.setResState(0);
                 inVO.setResPay(0);
                 inVO.setResMileage(0);
                 inVO.setResScode(scode[0]);
            }
            //회원 및 비회원
              int flag = this.resService.doInsert(inVO);
            LOG.debug("3.========================");
            LOG.debug("3.=         flag         ="+flag);
            LOG.debug("3.========================");
           
           
           /** 성인 */
           String[] gender_A = req.getParameterValues("gender_A");
            String[] ename_A = req.getParameterValues("ename_A");
            String[] scode_A = req.getParameterValues("scode_A");
            String[] passport_A = req.getParameterValues("passport_A");      
            String[] year_A = req.getParameterValues("year_A"); 
            String[] month_A = req.getParameterValues("month_A"); 
            String[] day_A = req.getParameterValues("day_A"); 

            for(int i=0; i<ename_A.length; i++) {
               LOG.debug(i+"번째 "+"gender_A: "+gender_A[i]);
               LOG.debug(i+"번째 "+"ename_A: "+ename_A[i]);
                LOG.debug(i+"번째 "+"scode_A: "+scode_A[i]);
                LOG.debug(i+"번째 "+"passport_A: "+passport_A[i]);
                LOG.debug(i+"번째 "+"resYear_A: "+year_A[i]);
                LOG.debug(i+"번째 "+"resMonth_A: "+month_A[i]);
                LOG.debug(i+"번째 "+"resDay_A: "+day_A[i]);
               }
            if(adultCnt > 0) {
            for(int i=0;i<ename_A.length;i++) {
               ReservationVO resVO = new ReservationVO();
               
               resVO.setResNum(ResNum);
               resVO.setResEname(ename_A[i]);
               resVO.setResScode(scode_A[i]);
               resVO.setResPassport(passport_A[i]);
               resVO.setResBir(year_A[i]+month_A[i]+day_A[i]);            
               resVO.setResphone("");
               resVO.setResEmail("");
               resVO.setResWay(1);
               resVO.setResPtype(1);
               resVO.setResGender(Integer.parseInt(gender_A[i]));
               resVO.setResState(1);
               resVO.setResPay(0);
               resVO.setResMileage(0);
               resVO.setuNum(0);
               
           
               inresVO.add(resVO);
               }
            }
            LOG.debug("=====================");
            for(ReservationVO vo : inresVO) {
               LOG.debug(vo);
            }
            LOG.debug("=====================");
            
            //성인
            int flagA = this.resService.doInsert(inresVO);
           
            LOG.debug("3.========================");
            LOG.debug("3.=         flag         ="+flagA);
            LOG.debug("3.========================");   
            
            inresVO.clear();
            /** 소아 */
            
            String[] gender_C = req.getParameterValues("gender_C");
            String[] ename_C = req.getParameterValues("ename_C");
            String[] scode_C = req.getParameterValues("scode_C");
            String[] passport_C = req.getParameterValues("passport_C");      
            String[] year_C = req.getParameterValues("year_C"); 
            String[] month_C = req.getParameterValues("month_C"); 
            String[] day_C = req.getParameterValues("day_C"); 

            for(int i=0; i<ename_C.length; i++) {
               LOG.debug(i+"번째 "+"gender_C: "+gender_C[i]);
                LOG.debug(i+"번째 "+"ename_C: "+ename_C[i]);
                LOG.debug(i+"번째 "+"scode_C: "+scode_C[i]);
                LOG.debug(i+"번째 "+"passport_C: "+passport_C[i]);
                LOG.debug(i+"번째 "+"year_C: "+year_C[i]);
                LOG.debug(i+"번째 "+"month_C: "+month_C[i]);
                LOG.debug(i+"번째 "+"day_C: "+day_C[i]);
               }
            if(childCnt > 0) {
            for(int i=0;i<ename_C.length;i++) {
               ReservationVO resVO = new ReservationVO();
               
               resVO.setResNum(ResNum);
               resVO.setResEname(ename_C[i]);
               resVO.setResScode(scode_C[i]);
               resVO.setResPassport(passport_C[i]);
               resVO.setResBir(year_C[i]+month_C[i]+day_C[i]);            
               resVO.setResphone("");
               resVO.setResEmail("");
               resVO.setResWay(1);
               resVO.setResPtype(1);
               resVO.setResGender(Integer.parseInt(gender_C[i]));
               resVO.setResState(1);
               resVO.setResPay(0);
               resVO.setResMileage(0);
               resVO.setuNum(0);
           
               inresVO.add(resVO);
               }
            }
            LOG.debug("=====================");
            for(ReservationVO vo : inresVO) {
               LOG.debug(vo);
            }
            LOG.debug("=====================");
            
            //소아
            int flagC = this.resService.doInsert(inresVO);
           
            LOG.debug("3.========================");
            LOG.debug("3.=         flag         ="+flagC);
            LOG.debug("3.========================");     
            inresVO.clear();
            /** 유아 */
            
            String[] gender_T = req.getParameterValues("gender_T");
            String[] ename_T = req.getParameterValues("ename_T");
            String[] scode_T = req.getParameterValues("scode_T");
            String[] passport_T = req.getParameterValues("passport_T");      
            String[] year_T = req.getParameterValues("year_T"); 
            String[] month_T = req.getParameterValues("month_T"); 
            String[] day_T = req.getParameterValues("day_T"); 

            for(int i=0; i<ename_T.length; i++) {
               LOG.debug(i+"번째 "+"gender_T: "+gender_T[i]);
                LOG.debug(i+"번째 "+"ename_T: "+ename_T[i]);
                LOG.debug(i+"번째 "+"scode_T: "+scode_T[i]);
                LOG.debug(i+"번째 "+"passport_T: "+passport_T[i]);
                LOG.debug(i+"번째 "+"year_T: "+year_T[i]);
                LOG.debug(i+"번째 "+"month_T: "+month_T[i]);
                LOG.debug(i+"번째 "+"day_T: "+day_T[i]);
               }
            if(toddCnt > 0) {
            for(int i=0;i<ename_T.length;i++) {
               ReservationVO resVO = new ReservationVO();
               
               resVO.setResNum(ResNum);
               resVO.setResEname(ename_T[i]);
               resVO.setResScode(scode_T[i]);
               resVO.setResPassport(passport_T[i]);
               resVO.setResBir(year_T[i]+month_T[i]+day_T[i]);            
               resVO.setResphone("");
               resVO.setResEmail("");
               resVO.setResWay(1);
               resVO.setResPtype(1);
               resVO.setResGender(Integer.parseInt(gender_T[i]));
               resVO.setResState(1);
               resVO.setResPay(0);
               resVO.setResMileage(0);
               resVO.setuNum(0);
           
               inresVO.add(resVO);
               }
            }
            LOG.debug("=====================");
            for(ReservationVO vo : inresVO) {
               LOG.debug(vo);
            }
            LOG.debug("=====================");
            
            //소아
            int flagT = this.resService.doInsert(inresVO);
           
            LOG.debug("3.========================");
            LOG.debug("3.=         flag         ="+flagT);
            LOG.debug("3.========================");
            
            inresVO.clear();
         //응답처리 
         res.setContentType("text/html;charset = utf-8 ");
         PrintWriter out = res.getWriter();
         
         String msg = "";
         Gson gson = new Gson();
         if(1 == flag) {
            msg = inVO.getResEname()+"이\n 에약 되었습니다.";
         }else {
            msg = inVO.getResEname()+"이\n 예약이 실패.";
         }
         
         String gsonStr = gson.toJson(new MessageVO(String.valueOf(flag), msg));
         LOG.debug("=======================");
         LOG.debug("=        gsonStr      ="+gsonStr);
         LOG.debug("=======================");
         out.println(gsonStr);
      }

   @Override
   public void doDel(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
      LOG.debug("=====================");
      LOG.debug("=       doDel       =");
      LOG.debug("=====================");
      
      //1.vo 변수 선언
      //2.param read
      //3.vo에 param set
      //4.service호출
      //5.Gson message
      //6.forword
      
      ReservationVO inVO = new ReservationVO();
      String seq = StringUtil.nvl(req.getParameter("seq"));
      //inVO.setSeq(Integer.parseInt(seq));
      
      int flag = this.resService.doDelete(inVO);
      
      Gson gson = new Gson();
      String msg = "";
      String gsonString = "";
      MessageVO msgVO = new MessageVO();
      
      if(flag > 0) {
         msg = "삭제되었습니다.";
      }else {
         msg = "삭제 실패다 임마~!!";
      }
      
      msgVO.setMsgId(String.valueOf(flag));
      msgVO.setMsgContents(msg);
      
      gsonString = gson.toJson(msgVO);
      LOG.debug("gsonString="+gsonString);
      
      res.setContentType("text/html;charset=utf-8");
      PrintWriter out = res.getWriter();
      out.print(gsonString);
   }
   
   /**
    * 
    *Method Name:doSelectOne
    *작성일: 2020. 2. 26.
    *작성자: sist
    *설명: 단건조회 화면으로 이동
    *@param req
    *@param res
    *@throws ServletException
    *@throws IOException
    */
   @Override
   public void doSelectOne(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
      //1.param
      //2.param to set vo
      //3.service call
      //4.request set
      //5.forword
      ReservationVO inVO = new ReservationVO();
      LOG.debug("*** doSelectOne");
      String resNum = StringUtil.nvl(req.getParameter("resNum"));
      String resPassport = StringUtil.nvl(req.getParameter("resPassport"));
      LOG.debug("resNum:"+resNum);
      LOG.debug("resPassport:"+resPassport);
      
      inVO.setResNum(resNum);
      inVO.setResPassport(resPassport);
      
      //inVO.setSeq(Integer.parseInt(seq));
      ReservationVO outVO = (ReservationVO)resService.doSelectOne(inVO);
      
      req.setAttribute("outVO", outVO);
      
      RequestDispatcher dispatcher = req.getRequestDispatcher("../selectOneReservation.jsp");
      dispatcher.forward(req , res);
   }
   
   /**
    * 
    *Method Name:doMoveToSave
    *작성일: 2020. 2. 26.
    *작성자: sist
    *설명: 등록화면으로 이동
    *@param req
    *@param res
    *@throws ServletException
    *@throws IOException
    */
   public void doMoveToSave(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
      RequestDispatcher dispatcher = req.getRequestDispatcher("/board/board_save.jsp");
      dispatcher.forward(req, res);
   }
   
   @Override
   public void doRetrieve(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
      //1.param
      //2.param set VO
      //3.service호출
      //4.특정화면+data
      SearchVO inVO = new SearchVO();
      
      String searchDiv  = StringUtil.nvl(req.getParameter("search_div"));
      String searchWord = StringUtil.nvl(req.getParameter("search_word"));
      String pageSize   = StringUtil.nvl(req.getParameter("page_size"),"10");
      String pageNum    = StringUtil.nvl(req.getParameter("page_num"),"1");
      
      inVO.setSearchDiv(searchDiv);
      inVO.setSearchWord(searchWord);
      inVO.setPageNum(Integer.parseInt(pageNum));
      inVO.setPageSize(Integer.parseInt(pageSize));
      
      LOG.debug("===================");
      LOG.debug("=inVO="+inVO);
      LOG.debug("===================");
      
      //---------------------------------
      
      
      List<ReservationVO> list = (List<ReservationVO>)this.resService.doRetrieve(inVO);
      
      LOG.debug("-----------------");
      for(ReservationVO vo : list) {
         LOG.debug(vo);
      }
      
      
      LOG.debug("-----------------");
      //http://localhost:8080/DaoWEB/board/board.do?search_div=10&search_word=&page_size=10&page_num=1&work_div=do_retrieve
      
      int totalCnt = 0;
      //총글수
      
      if(null != list && list.size() > 0) {
         ReservationVO totalVO = list .get(0);
         totalCnt = totalVO.getTotal();
      }
      //code
//      req.setAttribute("searchList", searchList);//search Code
//      req.setAttribute("pageSizeList", pageSizeList);//pageSize Code
      
      req.setAttribute("list", list);//목록 
      req.setAttribute("paramVO", inVO);//PARAM
      req.setAttribute("totalCnt", totalCnt);//총글수
      
       //총글수
      RequestDispatcher dispatcher = req.getRequestDispatcher("/board/board_list.jsp");
      dispatcher.forward(req, res);
      
   }
   
   public void doMemberRetrieve(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
	   	
	   String resNum=(String)req.getParameter("resNum");
	   	LOG.debug("resNum: "+resNum);
	   
	      ReservationVO inVO = new ReservationVO();
	     inVO.setResNum(resNum);
	      
	      
	      LOG.debug("===================");
	      LOG.debug("=inVO="+inVO);
	      LOG.debug("===================");
	      
	      //---------------------------------
	      
	      
	      List<ReservationVO> list = (List<ReservationVO>)this.resService.doMemberRetrieve(inVO);
	      
	      LOG.debug("-----------------");
	      for(ReservationVO vo : list) {
	         LOG.debug(vo);
	      }
	      
	      
	      LOG.debug("-----------------");
	      //http://localhost:8080/DaoWEB/board/board.do?search_div=10&search_word=&page_size=10&page_num=1&work_div=do_retrieve
	      
	      int totalCnt = 0;
	      //총글수
	      
	      if(null != list && list.size() > 0) {
	         ReservationVO totalVO = list .get(0);
	         totalCnt = totalVO.getTotal();
	      }
	      //code
//	      req.setAttribute("searchList", searchList);//search Code
//	      req.setAttribute("pageSizeList", pageSizeList);//pageSize Code
	      
	      req.setAttribute("list", list);//목록 
	      
	       //총글수
	      RequestDispatcher dispatcher = req.getRequestDispatcher("../selectOneReservation.jsp");
	      dispatcher.forward(req, res);
	      
	   }
   
   
   public void doResRetrieve(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
	   	
	   HttpSession  session  =req.getSession();
	   MemberVO memberVO=(MemberVO)session.getAttribute("user");
	   	LOG.debug("memberVO: "+memberVO);
	   
	     ReservationVO inVO = new ReservationVO();
	     inVO.setuNum(memberVO.getuNum());
	      
	      
	      LOG.debug("===================");
	      LOG.debug("=inVO="+inVO);
	      LOG.debug("===================");
	      
	      //---------------------------------
	      
	      
	      List<ReservationVO> list = (List<ReservationVO>)this.resService.doResRetrieve(inVO);
	      List<ScheduleVO> scList=new ArrayList<ScheduleVO>();
	      ScheduleDAO scDao=new ScheduleDAO();
	      
	      LOG.debug("-----------------");
	      for(ReservationVO vo : list) {
	    	  ScheduleVO scVO=new ScheduleVO();
	    	  scVO.setScCode(vo.getResScode());
	    	  scList.add((ScheduleVO)scDao.doSelectOne(scVO));  
	      }
	      
	      
	      LOG.debug("-----------------");
	      //http://localhost:8080/DaoWEB/board/board.do?search_div=10&search_word=&page_size=10&page_num=1&work_div=do_retrieve
	      
	      int totalCnt = 0;
	      //총글수
	      
	      if(null != list && list.size() > 0) {
	         ReservationVO totalVO = list .get(0);
	         totalCnt = totalVO.getTotal();
	      }
	      //code
//	      req.setAttribute("searchList", searchList);//search Code
//	      req.setAttribute("pageSizeList", pageSizeList);//pageSize Code
	      
	      req.setAttribute("scList", scList);//목록 
	      req.setAttribute("list", list);//목록 
	      req.setAttribute("paramVO", inVO);//PARAM
	      req.setAttribute("totalCnt", totalCnt);//총글수
	      
	       //총글수
	      RequestDispatcher dispatcher = req.getRequestDispatcher("../selectReservation.jsp");
	      dispatcher.forward(req, res);
	      
	   }
}